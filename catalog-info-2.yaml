# `catalog-info.yaml`

# Context
# -------

# Powered by a centralized software catalog, the BSD Developer Portal restores order to infrastructure and enables our product teams
# to ship high-quality code quickly â€” without compromising autonomy.

# The BSD Software Catalog, a component of the BSD Developer Portal, is a centralized system that keeps track of ownership and metadata
# for all the software in your ecosystem (services, websites, libraries, data pipelines, etc).

# The catalog is built around the concept of metadata YAML files stored together with the code, which are then harvested and visualized in the BSD Developer Portal.
# https://backstage.io/docs/features/software-catalog/

# The catalog forms a hub of sorts, where entities are ingested from various authoritative sources and held in a database,
# subject to automated processing, and then presented through an API for quick and easy access by the BSD Developer Portal that the developers interface with.

# The most common source is YAML files using a standard format, living in version control systems near the source code of systems that they describe.

# Those files are registered with the catalog and maintained by the respective owners. The catalog makes sure to keep itself up to date with changes to those files.

# Instructions for proof-of-concept phase
# ---------------------------------------
# 1. Give `matthew.moore3@tc.gc.ca` access to read your repository.
# 2. Take this `catalog-info-template.yaml` from this repository and copy into target repository.
# 3. Rename `catalog-info-template.yaml` to `catalog-info.yaml`.
# 4. Define System, Component, Group, User and Resource entities to `catalog-info.yaml` following guidance provided in the template file.
# 5. Log into BSD Developer Portal and navigate to Home, click Create button, click Register Existing Component,
#    enter url to `cataglog-info.yaml` (e.g. https://dev.azure.com/transport-canada/TACE/_git/Backstage?path=%2Fcatalog-info.yaml&version=GBmain), click Analyze, click Import.
# 6. Search in the BSD Developer Portal to ensure newly added entities are visible in the BSD Developer Portal UI.
# 7. Add an item to your release checklist to remind your team to update the `catalog-info.yaml` before deploying new version.

# Naming conventions
# -----------
# 1. Except in the case of titles and descriptions, use alphanumeric lower case characters and separate spaces with hyphens.
# 2. In the case of titles use title casing with periods.
# 3. In the case of descriptions be concise with proper capitalization and use of commas and periods.

# Sytem entity
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
# A system is a collection of resources and components. The system may expose or consume one or several APIs. It is viewed as abstraction level that provides potential consumers
# insights into exposed features without needing a too detailed view into the details of all components.
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  # The name of the entity. This name is both meant for human eyes to recognize the entity, and for machines and other components to reference the entity. Must be unique.
  name: CSF-GMC
  # A display name of the entity, to be presented in user interfaces instead of the name property above, when available.
  # Full name of title then the acronym surrounded by parentheses.
  title: Marine Medical External Application
  # A human readable description of the entity, to be shown in Backstage. Should be kept short and informative, suitable to give an overview of the entity's purpose at a glance.
  # More detailed explanations and documentation should be placed elsewhere.
  description: Provides Marine Medical Unit access to medical information by CDN
  
  # Annotations are used for various Backstage plugins.
  
  # BSD Developer portal uses the `backstage.io/source-location` to enable users of the portal to navigate from the about card of an entity right
  # to its source code.
  # In addition the Backstage `linguist` plugin uses the `dev.azure.com/project-repo` to build stats on languages used by an entity.
  
  # BSD Developer portal uses the `dev.azure.com/project-repo` annotation to enable the Backstage `azure-devops` plugin to
  # add the CI/CD, Pull Requests and README tabs for the various entities.  
  
  # Add these annotations to other entities below (e.g. components) as it makes sense for your code.  
  # For example, if you have a monolith system then the annotation should go in the system entity.  If your system is composed of
  # components each with their own repo/cicd etc. then put the annotation in the component entities.
  annotations:
    dev.azure.com/project-repo: DSD-Marine Certification/CSF-GMC
    backstage.io/source-location: url:https://dev.azure.com/transport-canada/DSD-MARINE%20Certification/_git/CSF-GMC
  # Tags are used to communicate code languages deployment location of an entity.
  # Code language tags are auto-generated by the Backstage `linguist` plugin.
  # Well-known values for deployment locations are:
  # onprem - entity is deployed largely onprem. May use cloud for non-functional items such as logging, analytics, appinsights etc.
  # cloud - entity is deployed largely in the cloud. May have onprem clients connecting to its services
  # hybrid - entity's functional components are deployed onprem and in the cloud.  Eg. Web service hosted in cloud with API hosted onprem that connects to onprem database.
  tags:
    - cloud

  # A list of external hyperlinks related to the entity. Links can provide additional contextual information that may be located outside of the BSD Developer Portal itself.
  # Links are used to help users (other developers at BSD) self-service understanding more detail about your system.
  # In the future we may standardize what links to add but for now a link to repo, documentation, application itself, sandbox etc. make sense.
  # Note that you can add links to components of a system.  Guidance is to not to duplicate links in multiple entities.
  links:
    - url: https://ncdcsfgmcdashboardapp01.azurewebsites.net/
      title: CSF GMC Application
    - url: https://dev.azure.com/transport-canada/DSD-MARINE%20Certification/_git/CSF-GMC
      title: CSF GMC Code Repository
    - url: https://dev.azure.com/transport-canada/DSD-MARINE%20Certification/_wiki/wikis/DSD-MARINE-Certification.wiki/6649/Marine-Certification-Home-Page
      title: Marine Certification Documentation

spec:
  # `spec.owner` is required.
  # The owner of a system is the singular entity (commonly a team) that bears ultimate responsibility for the system, and has the authority
  # and capability to develop and maintain it. They will be the point of contact if something goes wrong,  or if features are to be requested.
  # The main purpose of this field is for display purposes in the BSD Developer Portal, so that people looking at catalog items can get an understanding of to whom this system
  # belongs. It is not to be used by automated processes to for example assign authorization in runtime systems.
  # There may be others that also develop or otherwise touch the system, but there will always be one ultimate owner.
  owner: marine-medical-team

  # `spec.type` is required.
  # Well-known values for `spec.type` are:
  # external - Select this value if any part of the system can be connected to from outside of the VPN or SCED.
  # internal - Select this value if system is not `external`.
  type: internal

  # `spec.lifecycle` is required.
  # Well-known values for `spec.lifecycle` are:
  # experimental - an experiment or early, non-production component, signaling that users may not prefer to consume it over other more established components, or that there are low or no reliability guarantees
  # production - an established, owned, maintained component
  # deprecated - a component that is at the end of its lifecycle, and may disappear at a later point in time
  lifecycle: production

  # `spec.domain` is optional.  If the system does not correlate to one of the three Transport Canada domains then omit this property.
  # Well-known values for `spec.domain` are one of the three Transport Canada domains:
  # inspection
  # enforcement
  # certification
  domain: certification

# Separate your entities using `---` so all entities can be specified in one file named `catalog-info.yaml` at the root of your repository.
---
# Component entity
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
# A Component describes a software component. It is typically intimately linked to the source code that constitutes the component,
# and should be what a developer may regard a "unit of software", usually with a distinct deployable or linkable artifact.
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: Marine Medical Hub
  title: Marine Medical External Application
  description: Allows Medical Users (Doctors and Nurses) to upload MME Forms or other Medical files for a given CDN
  tags:
    - dotnet
    - onprem
spec:
  # `spec.owner` is required.
  # The owner of a system is the singular entity (commonly a team) that bears ultimate responsibility for the component, and has the authority
  # and capability to develop and maintain it. They will be the point of contact if something goes wrong,  or if features are to be requested.
  # The main purpose of this field is for display purposes in the BSD Developer Portal, so that people looking at catalog items can get an understanding of to whom this system
  # belongs. It is not to be used by automated processes to for example assign authorization in runtime systems.
  # There may be others that also develop or otherwise touch the coponent, but there will always be one ultimate owner.
  owner: marine-medical-team

  # `spec.type` is required.
  # Well-known values for `spec.type` are:
  # service - a backend service, typically exposing an API
  # website - a website
  # library - a software library, such as an dotnet assembly, npm module or a Java library
  type: service

  # `spec.lifecycle` is required.
  # Well-known values for `spec.lifecycle` are:
  # experimental - an experiment or early, non-production component, signaling that users may not prefer to consume it over other more established components, or that there are low or no reliability guarantees
  # production - an established, owned, maintained component
  # deprecated - a component that is at the end of its lifecycle, and may disappear at a later point in time
  lifecycle: production

---

# API Entity
# https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Workload Management Service
  description: Manages Work Items
spec:
  # `spec.type` is required.
  # https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
  type: openapi
  lifecycle: production
  owner: user.name4
  system: my-inspection-app
  definition: |
    openapi: "3.0.1"
    info:
      version: 2.0.9.4
      title: DSD MSS Work Management Service API
    servers:
      - url: https://api.dev.tc.canada.ca/wms

---

# API Entity
# https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Workload Management Service
  description: Manages Work Items
spec:
  # `spec.type` is required.
  # https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
  type: openapi
  lifecycle: production
  owner: user.name3
  system: my-inspection-app
  definition: |
    openapi: "3.0.1"
    info:
      version: 2.0.9.4
      title: DSD MSS Work Management Service API
    servers:
      - url: https://api.dev.tc.canada.ca/wms

---

# API Entity
# https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: Document Management Service
  description: Manages Documents
spec:
  # `spec.type` is required.
  # https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
  type: openapi
  lifecycle: production
  owner: user.name2
  system: my-inspection-app
  definition: |
    openapi: "3.0.1"
    info:
      version: 1.0.1.17
      title: DocumentService
    servers:
      - url: https://api.dev.tc.canada.ca/dms

---

# API Entity
# https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: List of Values Service
  description: Manages Work Items
spec:
  # `spec.type` is required.
  # https://backstage.io/docs/features/software-catalog/descriptor-format/#kind-api
  type: openapi
  lifecycle: production
  owner: user.name2
  system: my-inspection-app
  definition: |
    openapi: "3.0.1"
    info:
      version: 1.0.0
      title: List of Values API 1.0
      license:
        name: MIT
    servers:
      - url: https://api.dev.tc.canada.ca/LOV

---
    
# User entity
apiVersion: backstage.io/v1alpha1
kind: User
# `metadata.name` is required.
# The name should be the username portion of the user's email address.  E.g. username@tc.gc.ca
metadata:
  name: christine.yu
spec:
  profile:
    displayName: User Name
    email: user.name@email.com
  memberOf: 
  [
    product-owners
  ]


